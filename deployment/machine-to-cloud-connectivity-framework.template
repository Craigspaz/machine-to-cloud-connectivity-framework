#####################################################################################################################
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           #
#                                                                                                                   #
# Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance    #
# with the License. A copy of the License is located at                                                             #
#                                                                                                                   #
#     http://www.apache.org/licenses/LICENSE-2.0                                                                    #
#                                                                                                                   #
# or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES #
# OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing         #
# permissions and limitations under the License.                                                                    #
######################################################################################################################

AWSTemplateFormatVersion: 2010-09-09
Description: (SO0070) - The AWS cloud formation template for the deployment of %%SOLUTION_NAME%%. Version %%VERSION%%.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Use an existing Greengrass Group
      Parameters:
      - ExistingGreengrassGroup
    - Label:
        default: Fill out these parameters if you're using an EXISTING Greengrass group
      Parameters:
      - ExistingGreengrassGroupID
    - Label:
        default: Fill out these parameters if you are NOT using an existing Greengrass group
      Parameters:
      - GreengrassGroupName
      - DeviceGatewayName
      - GreengrassCoreCertificateArn
    - Label:
        default: Kinesis Firehose configuration settings
      Parameters:
      - FirehoseBufferTime
      - FirehoseBufferSize
    ParameterLabels:
        ExistingGreengrassGroup:
            default: Do you have an EXISTING Greengrass group you want to use?
        ExistingGreengrassGroupID:
            default: Enter the existing Greengrass group ID
        GreengrassGroupName:
            default: Name of your new Greengrass group
        DeviceGatewayName:
            default: Name of your new Greengrass device gateway
        GreengrassCoreCertificateArn:
            default: The ARN of your the certificate you have created in the AWS IoT Core
        FirehoseBufferTime:
            default: Kinesis Firehose buffer time
        FirehoseBufferSize:
            default: Kinesis Firehose buffer size
Parameters:
    ExistingGreengrassGroup:
        Description: Do you want to use an existing greengrass group as the default group of the solution?
        Type: String
        AllowedValues:
            - 'true'
            - 'false'
        Default: 'false'
    ExistingGreengrassGroupID:
        Description: The Greengrass ID can be found in the Settings option of your Greengrass group in the console.
        Type: String
    GreengrassGroupName:
        Description: If you do not have an existing greengrass group, name of the Greengrass group you want to create.
        Type: String
    DeviceGatewayName:
        Description: If you do not have an existing greengrass group, name of the gateway that you wish to create.
        Type: String
    GreengrassCoreCertificateArn:
        Description: If you do not have an existing greengrass group, you need to have created a certificate prior to launching this solution.
        Type: String
    FirehoseBufferTime:
        Description: The length of time, in seconds, that Kinesis Data Firehose buffers incoming data before delivering it to the destination. The minimum value is 60, maximum is 900.
        Type: Number
        Default: 300
        MinValue: 60
        MaxValue: 900
    FirehoseBufferSize:
        Description: The size of the buffer, in MBs, that Kinesis Data Firehose uses for incoming data before delivering it to the destination. The minimum value is 1, maximum is 128.
        Type: Number
        Default: 100
        MinValue: 1
        MaxValue: 128


Mappings:
    SourceCode:
        General:
            S3Bucket: "%%BUCKET_NAME%%"
            KeyPrefix: "%%SOLUTION_NAME%%/%%VERSION%%"
    Metadata:
        General:
            KeyPrefix: job-metadata/
    OPCDAConnectorLambdaBucket:
        General:
            KeyPrefix: opcda-connector-lambda
    SLMPConnectorLambdaBucket:
        General:
            KeyPrefix: slmp-connector-lambda
    ConnectorLambdaBucket:
        General:
            KeyPrefix: connector-lambda
    LambdaRuntime:
        Language:
            Python: python3.8
    Metrics:
        General:
            SendAnonymousUsage: Yes
    Solution:
        Parameters:
            Id: SO0070


Conditions:
    Metrics: !Equals [ !FindInMap [Metrics,General,SendAnonymousUsage], Yes]
    CreateGreengrassResources: !Equals [ !Ref ExistingGreengrassGroup, false]

Resources:

    LogsBucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        UpdateReplacePolicy: Retain
        Properties:
            AccessControl: LogDeliveryWrite
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                - ServerSideEncryptionByDefault:
                    SSEAlgorithm: AES256
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W35
                      reason: This bucket is to store S3 and CloudFront logs, so it does not require to have logs for this bucket.
                    - id: W51
                      reason: This bucket is to store S3 and CloudFront logs, so it does not require the bucket policy.

    JobBuilderFunction:
        DependsOn: M2C2GGKinesisFirehoseToS3
        Type: AWS::Lambda::Function
        Properties:
            Description: AWS Machine to Cloud job builder function
            Code:
                S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region" ]]
                S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "m2c2-job-builder.zip"]]
            Handler: m2c2_job_builder_main.lambda_handler
            Role:
                Fn::GetAtt: [ JobBuilderRole , "Arn" ]
            FunctionName: !Sub "${AWS::StackName}-m2c2-job-builder"
            Runtime: !FindInMap ["LambdaRuntime", "Language", "Python"]
            Timeout: 60
            MemorySize: 128
            Environment:
                Variables:
                    JBM_TBL: !Ref JobMetadataTable
                    JBM_BCK: !Ref M2C2Bucket
                    JBM_KEY: !FindInMap ["Metadata", "General", "KeyPrefix"]
                    CON_KEY: !FindInMap ["ConnectorLambdaBucket", "General", "KeyPrefix"]
                    GGG_ID: !If [CreateGreengrassResources, !GetAtt M2C2GreengrassGroup.Id, !Ref ExistingGreengrassGroupID]
                    RES_ID: !If [CreateGreengrassResources, M2C2LocalResourceId, ""]
                    CON_ROL: !GetAtt M2C2ConnectorLambdaRole.Arn
                    MET_ENB: !FindInMap ["Metrics", "General", "SendAnonymousUsage"]
                    SOL_ID: !FindInMap ["Solution", "Parameters", "Id"]
                    UUID: !GetAtt M2C2Helper.UUID
                    SOL_VER: "%%VERSION%%"
                    KINESIS_ARN: !GetAtt M2C2GGKinesisFirehoseToS3.Arn

    OpcDaJobBuilderFunction:
        Type: AWS::Lambda::Function
        Properties:
            Description: AWS Machine to Cloud job builder function
            Code:
                S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region" ]]
                S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "m2c2-job-builder.zip"]]
            Handler: m2c2_job_builder_main.lambda_handler
            Role:
                Fn::GetAtt: [ JobBuilderRole , "Arn" ]
            FunctionName: !Sub "${AWS::StackName}-m2c2-opcda-job-builder"
            Runtime: !FindInMap ["LambdaRuntime", "Language", "Python"]
            Timeout: 60
            MemorySize: 128
            Environment:
                Variables:
                    JBM_TBL: !Ref JobMetadataTable
                    JBM_BCK: !Ref M2C2Bucket
                    JBM_KEY: !FindInMap ["Metadata", "General", "KeyPrefix"]
                    CON_KEY: !FindInMap ["OPCDAConnectorLambdaBucket", "General", "KeyPrefix"]
                    GGG_ID: !If [CreateGreengrassResources, !GetAtt M2C2GreengrassGroup.Id, !Ref ExistingGreengrassGroupID]
                    RES_ID: !If [CreateGreengrassResources, M2C2LocalResourceId, ""]
                    CON_ROL: !GetAtt M2C2ConnectorLambdaRole.Arn
                    MET_ENB: !FindInMap ["Metrics", "General", "SendAnonymousUsage"]
                    SOL_ID: !FindInMap ["Solution", "Parameters", "Id"]
                    UUID: !GetAtt M2C2Helper.UUID
                    SOL_VER: "%%VERSION%%"
                    KINESIS_ARN: !GetAtt M2C2GGKinesisFirehoseToS3.Arn


    JobGeneratorRule:
        Type: AWS::IoT::TopicRule
        Properties:
            TopicRulePayload:
                RuleDisabled: false
                Description: Processing of the job submitted and generating the job file to be pushed to Greengrass
                Sql: >-
                    SELECT * FROM 'm2c2/job/request'
                Actions:
                    -
                        Lambda:
                            FunctionArn: !GetAtt JobBuilderFunction.Arn

    LambdaInvokeBuilderPermission:
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName: !GetAtt JobBuilderFunction.Arn
            Action: lambda:InvokeFunction
            Principal: iot.amazonaws.com
            SourceArn: !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:rule/${JobGeneratorRule}"
            SourceAccount: !Sub "${AWS::AccountId}"

    JobBuilderRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Service:
                                - lambda.amazonaws.com
                        Action:
                                - sts:AssumeRole
            Path: /
            Policies:
                -
                    PolicyName: JobBuilderPolicy
                    PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                        -
                              Effect: Allow
                              Action:
                                  - logs:CreateLogGroup
                                  - logs:CreateLogStream
                                  - logs:PutLogEvents
                              Resource:
                                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"

                        -
                            Effect: Allow
                            Action:
                                - "dynamodb:PutItem"
                                - "dynamodb:GetItem"
                                - "dynamodb:Query"
                                - "dynamodb:Scan"
                                - "dynamodb:UpdateItem"
                            Resource:
                                - !GetAtt JobMetadataTable.Arn
                        -
                            Effect: "Allow"
                            Action:
                                - "s3:GetBucketLocation"
                                - "s3:GetObject"
                                - "s3:ListBucket"
                                - "s3:PutObject"
                            Resource:
                                - Fn::Sub: "arn:aws:s3:::${M2C2Bucket}"
                                - Fn::Sub: "arn:aws:s3:::${M2C2Bucket}/*"
                        -
                            Effect: "Allow"
                            Action:
                                - "iot:publish"
                            Resource:
                                - !Join ["", ["arn:aws:iot:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":topic/m2c2/job/*"]]
                        -
                            Effect: "Allow"
                            Action:
                            -   lambda:CreateFunction
                            -   lambda:DeleteFunction
                            -   lambda:PublishVersion
                            -   lambda:CreateAlias
                            -   lambda:DeleteAlias

                            Resource:
                                -  !Join ["", ["arn:aws:lambda:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":function:", "m2c2-opcda-connector*"]]
                                -  !Join ["", ["arn:aws:lambda:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":function:", "m2c2-slmp-connector*"]]
                        -
                            Effect: "Allow"
                            Action:
                            -   iam:PassRole
                            Resource:
                                -  !Join ["", ["arn:aws:iam::", Ref: "AWS::AccountId", ":role/", "*", !Ref M2C2ConnectorLambdaRole, "*"]]
                        -
                            Effect: "Allow"
                            Action:
                            -   "greengrass:*"
                            Resource: "*"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W11
                        reason: "The * resource allows JobBuilderRole to exchange information with solution resources."
                    -
                        id: F3
                        reason: "Greengrass only supports * in resources"

    JobMetadataTable:
        Type: AWS::DynamoDB::Table
        DeletionPolicy: Delete
        Properties:
            AttributeDefinitions:
                -
                    AttributeName: jobid
                    AttributeType: "S"
                -
                    AttributeName: version
                    AttributeType: "N"
            KeySchema:
                -
                    AttributeName: jobid
                    KeyType: "HASH"
                -
                    AttributeName: version
                    KeyType: "RANGE"
            BillingMode: PAY_PER_REQUEST
            SSESpecification:
              SSEEnabled: True

    M2C2Bucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        Properties:
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                    - ServerSideEncryptionByDefault:
                          SSEAlgorithm: AES256
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true
            LoggingConfiguration:
                DestinationBucketName: !Ref LogsBucket
                LogFilePrefix: m2c2/

    M2C2BucketPolicy:
        DependsOn: M2C2Bucket
        Type: AWS::S3::BucketPolicy
        Properties:
          Bucket: !Ref M2C2Bucket
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action:
              - s3:GetObject
              - s3:PutObject
              Resource: !Join ["", ["arn:aws:s3:::", !Ref M2C2Bucket, "/*"]]

    M2C2DataBucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        Properties:
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                    - ServerSideEncryptionByDefault:
                          SSEAlgorithm: AES256
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true
            LoggingConfiguration:
                DestinationBucketName: !Ref LogsBucket
                LogFilePrefix: m2c2data/

    M2C2DataBucketPolicy:
        DependsOn: M2C2DataBucket
        Type: AWS::S3::BucketPolicy
        Properties:
          Bucket: !Ref M2C2DataBucket
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Principal:
                Service: firehose.amazonaws.com
              Action:
              - s3:GetObject
              - s3:PutObject
              - s3:AbortMultipartUpload
              - s3:GetBucketLocation
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              Resource:
              - !Join ["", ["arn:aws:s3:::", !Ref M2C2DataBucket, "/*"]]
              - !Join ["", ["arn:aws:s3:::", !Ref M2C2DataBucket]]

    M2C2GGKinesisFirehoseToS3:
        DependsOn: M2C2DataBucket
        Type: AWS::KinesisFirehose::DeliveryStream
        Properties:
            DeliveryStreamName: !Sub "${AWS::StackName}-M2C2GGKinesisDeliveryStream"
            DeliveryStreamType: DirectPut
            ExtendedS3DestinationConfiguration:
                BucketARN: !GetAtt M2C2DataBucket.Arn
                BufferingHints:
                    IntervalInSeconds: !Ref FirehoseBufferTime
                    SizeInMBs: !Ref FirehoseBufferSize
                CompressionFormat: GZIP
                CloudWatchLoggingOptions:
                    Enabled: true
                    LogGroupName: deliverystream
                    LogStreamName: s3Delivery
                RoleARN: !GetAtt M2C2GGKinesisFirehoseToS3Role.Arn

    M2C2GGKinesisFirehoseToS3Role:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Principal:
                            Service:
                                - "firehose.amazonaws.com"
                        Action:
                                - "sts:AssumeRole"
            Path: "/"

    M2C2GGKinesisFirehoseToS3Policy:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: M2C2GGKinesisFirehoseToS3Policy
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                    -
                        Effect: Allow
                        Action:
                            - s3:AbortMultipartUpload
                            - s3:GetBucketLocation
                            - s3:GetObject
                            - s3:ListBucket
                            - s3:ListBucketMultipartUploads
                            - s3:PutObject
                        Resource:
                            - !Join ["", ["arn:aws:s3:::", !Ref M2C2DataBucket, "/*"]]
                    -
                        Effect: Allow
                        Action:
                            - logs:CreateLogGroup
                            - logs:CreateLogStream
                            - logs:PutLogEvents
                        Resource:
                            - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/firehose/*"
            Roles:
                -  !Ref M2C2GGKinesisFirehoseToS3Role


    M2C2Gateway:
        Type: 'AWS::IoT::Thing'
        Condition: CreateGreengrassResources
        Properties:
            ThingName: !Ref DeviceGatewayName

    M2C2CoreDefinition:
        Type: 'AWS::Greengrass::CoreDefinition'
        Condition: CreateGreengrassResources
        Properties:
            Name: !Join ["", [!Ref GreengrassGroupName, "_Core"]]

    M2C2CoreDefinitionVersion:
        Type: 'AWS::Greengrass::CoreDefinitionVersion'
        Condition: CreateGreengrassResources
        Properties:
            CoreDefinitionId: !Ref M2C2CoreDefinition
            Cores:
                -
                    Id: M2C2CoreDefinitionId
                    CertificateArn: !Ref GreengrassCoreCertificateArn
                    SyncShadow: true
                    ThingArn: !Join ["", ["arn:aws:iot", ":", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":", "thing/", !Ref DeviceGatewayName]]
        DependsOn: M2C2Gateway

    M2C2LoggerDefinition:
        Type: 'AWS::Greengrass::LoggerDefinition'
        Condition: CreateGreengrassResources
        Properties:
            Name: M2C2LoggerDefinition

    M2C2LoggerDefinitionVersion:
        Type: 'AWS::Greengrass::LoggerDefinitionVersion'
        Condition: CreateGreengrassResources
        Properties:
            LoggerDefinitionId: !Ref M2C2LoggerDefinition
            Loggers:
                -
                    Id: M2C2Logger1
                    Type: FileSystem
                    Component: GreengrassSystem
                    Level: INFO
                    Space: 128
                -
                    Id: M2C2Logger2
                    Type: FileSystem
                    Component: Lambda
                    Level: INFO
                    Space: 128
                -
                    Id: M2C2Logger3
                    Type: AWSCloudWatch
                    Component: Lambda
                    Level: INFO

    M2C2ResourceDefinition:
        Type: 'AWS::Greengrass::ResourceDefinition'
        Condition: CreateGreengrassResources
        Properties:
            Name: DemoTestResourceDefinition

    M2C2ResourceDefinitionVersion:
        Type: 'AWS::Greengrass::ResourceDefinitionVersion'
        Condition: CreateGreengrassResources
        Properties:
            ResourceDefinitionId: !Ref M2C2ResourceDefinition
            Resources:
                -
                    Id: M2C2LocalResourceId
                    Name: M2C2LocalResource
                    ResourceDataContainer:
                        LocalVolumeResourceData:
                            SourcePath: /m2c2/job
                            DestinationPath: /m2c2/job
                            GroupOwnerSetting:
                                AutoAddGroupOwner: true

    M2C2GGKinesisConnectorDefinition:
        Type: AWS::Greengrass::ConnectorDefinition
        Properties:
            Name: M2C2GGKinesisConnectorDefinition


    M2C2GGKinesisConnectorDefinitionVersion:
        Type: AWS::Greengrass::ConnectorDefinitionVersion
        Properties:
            ConnectorDefinitionId: !Ref M2C2GGKinesisConnectorDefinition
            Connectors:
                -   Id: KinesisFirehoseConnector1
                    ConnectorArn: !Join ["", ["arn:aws:greengrass:", Ref: "AWS::Region", "::/connectors/KinesisFirehose/versions/4"]]
                    Parameters:
                        DefaultDeliveryStreamArn: !GetAtt M2C2GGKinesisFirehoseToS3.Arn
                        DeliveryStreamQueueSize: 2000
                        MemorySize: 65535
                        PublishInterval: 15


    M2C2GreengrassGroup:
        Type: AWS::Greengrass::Group
        Condition: CreateGreengrassResources
        Properties:
            Name: !Ref GreengrassGroupName
            RoleArn: !GetAtt M2C2GreengrassResourceRole.Arn
            InitialVersion:
                ConnectorDefinitionVersionArn: !Ref M2C2GGKinesisConnectorDefinitionVersion
                CoreDefinitionVersionArn: !Ref M2C2CoreDefinitionVersion
                LoggerDefinitionVersionArn: !Ref M2C2LoggerDefinitionVersion
                ResourceDefinitionVersionArn: !Ref M2C2ResourceDefinitionVersion

    M2C2GreengrassResourceRole:
        Type: "AWS::IAM::Role"
        Condition: CreateGreengrassResources
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Principal:
                            Service:
                                - "greengrass.amazonaws.com"
                        Action:
                                - "sts:AssumeRole"
            Path: "/"

    M2C2GreengrassResourcePolicy:
        Type: AWS::IAM::Policy
        Condition: CreateGreengrassResources
        Properties:
            PolicyName: M2C2GreengrassResourcePolicy
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                    -
                        Effect: "Allow"
                        Action:
                            - "iot:Publish"
                            - "iot:Subscribe"
                            - "iot:Connect"
                            - "iot:Receive"
                            - "iot:GetThingShadow"
                            - "iot:UpdateThingShadow"
                            - "iot:DeleteThingShadow"
                        Resource: "*"
                    -
                        Effect: "Allow"
                        Action:
                            - "greengrass:*"
                        Resource: "*"
                    -
                        Effect: "Allow"
                        Action:
                            - "logs:CreateLogGroup"
                            - "logs:CreateLogStream"
                            - "logs:PutLogEvents"
                        Resource:
                            - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*m2c2*"
                    -
                        Effect: "Allow"
                        Action:
                            - "firehose:PutRecord"
                            - "firehose:PutRecordBatch"
                        Resource: !GetAtt M2C2GGKinesisFirehoseToS3.Arn
            Roles:
                -
                    !Ref M2C2GreengrassResourceRole
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W12
                        reason: "The * resource on its permission policy allows M2C2GreengrassResourcePolicy to write to multiple
                        lambda logs"
                    -
                        id: F4
                        reason: "Greengrass only supports * in resources"


    M2C2IoTResourcePolicy:
        Type: AWS::IoT::Policy
        Condition: CreateGreengrassResources
        Properties:
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                    -
                        Effect: "Allow"
                        Action:
                            - "iot:Publish"
                            - "iot:Subscribe"
                            - "iot:Connect"
                            - "iot:Receive"
                            - "iot:GetThingShadow"
                            - "iot:UpdateThingShadow"
                            - "iot:DeleteThingShadow"
                        Resource: "*"
                    -
                        Effect: "Allow"
                        Action:
                            - "greengrass:*"
                        Resource: "*"
                    -
                        Effect: "Allow"
                        Action:
                            - "logs:CreateLogGroup"
                            - "logs:CreateLogStream"
                            - "logs:PutLogEvents"
                        Resource:
                            - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*m2c2*"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W38
                        reason: "The * resource on its permission policy allows M2C2IoTResourcePolicy to wto connect to multiple IoT things and topics"
                    -
                        id: W39
                        reason: "The * resource on its permission policy allows M2C2IoTResourcePolicy to wto connect to multiple IoT things and topics"

    M2C2PolicyPrincipalAttachment:
        Type: AWS::IoT::PolicyPrincipalAttachment
        Condition: CreateGreengrassResources
        Properties:
            PolicyName: !Ref M2C2IoTResourcePolicy
            Principal: !Ref GreengrassCoreCertificateArn

    M2C2ThingPrincipalAttachment:
        Type: AWS::IoT::ThingPrincipalAttachment
        Condition: CreateGreengrassResources
        Properties:
            ThingName: !Ref M2C2Gateway
            Principal: !Ref GreengrassCoreCertificateArn

    M2C2ConnectorLambdaRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Service:
                                - lambda.amazonaws.com
                        Action:
                                - sts:AssumeRole
            Path: "/"

    M2C2ConnectorLambdaPolicy:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: M2C2ConnectorLambdaPolicy
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                    -
                        Effect: "Allow"
                        Action:
                            - "iot:Connect"
                        Resource: !Join ["", ["arn:aws:iot:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":client/", !Ref DeviceGatewayName]]
                    -
                            Effect: "Allow"
                            Action:
                                - "iot:publish"
                                - "iot:Subscribe"
                            Resource:
                                - !Join ["", ["arn:aws:iot:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":topic/m2c2/job/*"]]
                    -
                        Effect: "Allow"
                        Action:
                            - "logs:CreateLogGroup"
                            - "logs:CreateLogStream"
                            - "logs:PutLogEvents"
                        Resource:
                            - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*m2c2*"
            Roles:
                -
                    !Ref M2C2ConnectorLambdaRole
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W12
                        reason: "The * resource on its permission policy allows M2C2ConnectorLambdaPolicy to write to multiple topics"

    M2C2Helper:
        Type: Custom::M2C2Helper
        Properties:
            Resource: CopyConnectorLambdaZip
            ServiceToken: !GetAtt M2C2HelperFunction.Arn
            DestBucket: !Ref M2C2Bucket
            DestPrefix: !FindInMap ["OPCDAConnectorLambdaBucket", "General", "KeyPrefix"]
            SourceBucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region" ]]
            SourcePrefix: !FindInMap ["SourceCode", "General", "KeyPrefix"]
            Objects:
                - /m2c2-opcda-connector.zip
        DependsOn: M2C2HelperFunction
        DependsOn: M2C2Bucket

    SLMPM2C2Helper:
        Type: Custom::M2C2Helper
        Properties:
            Resource: CopySLMPConnectorLambdaZip
            ServiceToken: !GetAtt M2C2HelperFunction.Arn
            DestBucket: !Ref M2C2Bucket
            DestPrefix: !FindInMap ["SLMPConnectorLambdaBucket", "General", "KeyPrefix"]
            SourceBucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region" ]]
            SourcePrefix: !FindInMap ["SourceCode", "General", "KeyPrefix"]
            Objects:
                - /m2c2-slmp-connector.zip
        DependsOn: M2C2HelperFunction
        DependsOn: M2C2Bucket

    M2C2HelperSendAnonymousMetrics:
        Condition: Metrics
        Type: Custom::M2C2HelperSendAnonymousMetrics
        Properties:
            ServiceToken: !GetAtt M2C2HelperFunction.Arn
            Resource: SendAnonymousMetrics
            SolutionId: !FindInMap ["Solution", "Parameters", "Id"]
            UUID: !GetAtt M2C2Helper.UUID
            Version: "%%VERSION%%"
            Region: !Join ["", [Ref: "AWS::Region"]]
            ExistingGreengrassGroup: !Ref ExistingGreengrassGroup

    M2C2HelperRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                -   Effect: Allow
                    Principal:
                        Service: lambda.amazonaws.com
                    Action: sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            Path: /
            Policies:
                -   PolicyName: lambda-copier
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                        -   Effect: Allow
                            Action:
                            -   s3:GetObject
                            Resource:
                            -   !Join ["", ["arn:aws:s3:::", !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]], "/*"]]
                        -   Effect: Allow
                            Action:
                            -   s3:PutObject
                            -   s3:DeleteObject
                            -   s3:ListBucket
                            Resource:
                                -
                                    Fn::Sub: "arn:aws:s3:::${M2C2Bucket}"
                                -
                                    Fn::Sub: "arn:aws:s3:::${M2C2Bucket}/*"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W11
                        reason: "The * resource on its permission policy allows M2C2HelperRole to copy lambda from the bucket."

    M2C2HelperFunction:
        Type: AWS::Lambda::Function
        Properties:
            Description: Copies objects from a source S3 bucket to a destination
            Handler: m2c2_helper_custom_resource.handler
            Runtime: !FindInMap ["LambdaRuntime", "Language", "Python"]
            Role: !GetAtt 'M2C2HelperRole.Arn'
            Timeout: 240
            Tags:
                - Key: SolutionId
                  Value: SO0070
            Code:
                S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
                S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"], "m2c2-helper.zip"]]

Outputs:
    UUID:
        Condition: Metrics
        Description: Anonymous metric UUID
        Value: !GetAtt M2C2Helper.UUID
    M2C2Bucket:
        Description: "Bucket where the job files and connector lambda source code will be stored"
        Value: !Ref M2C2Bucket
    M2C2JobMetadataTable:
        Description: "The DynamoDB table where the jobs will be stored"
        Value: !Ref JobMetadataTable
    M2C2GreengrassGroup:
        Description: "Greengrass group that needs to be deployed to the on-premise gateway"
        Value: !If [CreateGreengrassResources, !GetAtt M2C2GreengrassGroup.Id, !Ref ExistingGreengrassGroupID]
    M2C2JobRequestTopic:
        Description: "IoT Topic where job needs to be submitted"
        Value: 'm2c2/job/request'
    M2C2ThingArn:
        Description: "The ARN of the IoT Device Gateway"
        Value: !Join ["", ["arn:aws:iot:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":thing/", !Ref DeviceGatewayName]]
    M2C2DataBucket:
        Description: "Bucket where the job telemetry data will be stored"
        Value: !Ref M2C2DataBucket
    M2C2KinesisFirehose:
        Description: "The Kinesis Firehose delivery stream that receives the telemetry data from Greengrass and sends it to S3"
        Value: !Ref M2C2GGKinesisFirehoseToS3



