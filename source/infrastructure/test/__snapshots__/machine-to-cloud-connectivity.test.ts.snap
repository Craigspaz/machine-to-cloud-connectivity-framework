// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`M2C2 stack test 1`] = `
Object {
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": Object {
    "CreateGreengrassResources": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "ExistingGreengrassGroupID",
        },
        "",
      ],
    },
    "CreateKinesisResources": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "ExistingKinesisStreamName",
        },
        "",
      ],
    },
    "SendAnonymousUsage": Object {
      "Fn::Equals": Array [
        Object {
          "Fn::FindInMap": Array [
            "Metrics",
            "General",
            "SendAnonymousUsage",
          ],
        },
        "Yes",
      ],
    },
  },
  "Mappings": Object {
    "Metrics": Object {
      "General": Object {
        "SendAnonymousUsage": "Yes",
      },
    },
    "Solution": Object {
      "Parameters": Object {
        "Id": "SO0070",
        "JobMetadataPrefix": "job-metadata/",
        "Version": "VERSION_PLACEHOLDER",
      },
    },
    "SourceCode": Object {
      "General": Object {
        "KeyPrefix": "SOLUTION_NAME_PLACEHOLDER/VERSION_PLACEHOLDER",
        "S3Bucket": "BUCKET_NAME_PLACEHOLDER",
      },
    },
  },
  "Metadata": Object {
    "AWS::CloudFormation::Interface": Object {
      "ParameterGroups": Array [
        Object {
          "Label": Object {
            "default": "Fill out this parameter if you're using an EXISTING Greengrass group.",
          },
          "Parameters": Array [
            "ExistingGreengrassGroupID",
          ],
        },
        Object {
          "Label": Object {
            "default": "Fill out this parameter if you're using an EXISTING Kinesis Data Stream.",
          },
          "Parameters": Array [
            "ExistingKinesisStreamName",
          ],
        },
      ],
      "ParameterLabels": Object {
        "ExistingGreengrassGroupID": Object {
          "default": "ID of the Existing AWS IoT Greengrass Group",
        },
        "ExistingKinesisStreamName": Object {
          "default": "Name of the Existing Data Stream in Kinesis Data Streams",
        },
      },
    },
  },
  "Outputs": Object {
    "CertKeyPairS3URL": Object {
      "Condition": "CreateGreengrassResources",
      "Description": "The solution generated a certificate and key pair for your Greengrass instance. Use this URL to download the tar archive to install on your Greengrass instance.",
      "Value": Object {
        "Fn::GetAtt": Array [
          "M2C2GreengrassResourcesGGCertCreator342C1381",
          "generatedS3URL",
        ],
      },
    },
    "CertificateArn": Object {
      "Condition": "CreateGreengrassResources",
      "Description": "ARN of certificate generated by the solution.",
      "Value": Object {
        "Fn::GetAtt": Array [
          "M2C2GreengrassResourcesGGCertCreator342C1381",
          "certificateArn",
        ],
      },
    },
    "CertificateId": Object {
      "Condition": "CreateGreengrassResources",
      "Description": "ID of certificate generated by the solution.",
      "Value": Object {
        "Fn::GetAtt": Array [
          "M2C2GreengrassResourcesGGCertCreator342C1381",
          "certificateId",
        ],
      },
    },
    "M2C2Bucket": Object {
      "Description": "Bucket where the job files will be stored",
      "Value": Object {
        "Ref": "M2C2CommonResourcesM2C2BucketA6ECCFEA",
      },
    },
    "M2C2DataBucket": Object {
      "Condition": "CreateKinesisResources",
      "Description": "Bucket where the job telemetry data will be stored",
      "Value": Object {
        "Ref": "M2C2DataDataStreamKinesisFirehoseToS3S3BucketD3170C5F",
      },
    },
    "M2C2DeviceGatewayThing": Object {
      "Condition": "CreateGreengrassResources",
      "Description": "The name of the IoT Device Gateway",
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            Object {
              "Ref": "AWS::StackName",
            },
            "-M2C2DeviceGateway",
          ],
        ],
      },
    },
    "M2C2DeviceGatewayThingArn": Object {
      "Condition": "CreateGreengrassResources",
      "Description": "The ARN of the IoT Device Gateway",
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "arn:",
            Object {
              "Ref": "AWS::Partition",
            },
            ":iot:",
            Object {
              "Ref": "AWS::Region",
            },
            ":",
            Object {
              "Ref": "AWS::AccountId",
            },
            ":thing/",
            Object {
              "Ref": "AWS::StackName",
            },
            "-M2C2DeviceGateway",
          ],
        ],
      },
    },
    "M2C2GreengrassGroup": Object {
      "Description": "Greengrass group that needs to be deployed to the on-premises gateway",
      "Value": Object {
        "Fn::If": Array [
          "CreateGreengrassResources",
          Object {
            "Fn::GetAtt": Array [
              "M2C2GreengrassResourcesm2c2GreengrassGroupFA1A4452",
              "Id",
            ],
          },
          "ExistingGreengrassGroupID",
        ],
      },
    },
    "M2C2JobMetadataTable": Object {
      "Description": "The DynamoDB table where the jobs will be stored",
      "Value": Object {
        "Ref": "M2C2JobBuilderDynamoTable8B0A941C",
      },
    },
    "M2C2JobRequestTopic": Object {
      "Description": "IoT Topic where jobs need to be submitted",
      "Value": "m2c2/job/request",
    },
    "M2C2KinesisStream": Object {
      "Description": "The Kinesis Data Stream that sends Greengrass Stream Manager data",
      "Value": Object {
        "Fn::If": Array [
          "CreateKinesisResources",
          Object {
            "Ref": "M2C2DataDataStreamKinesisStreamDBEB6D24",
          },
          Object {
            "Ref": "ExistingKinesisStreamName",
          },
        ],
      },
    },
    "UUID": Object {
      "Description": "Solution UUID",
      "Value": Object {
        "Fn::GetAtt": Array [
          "M2C2CustomResourcesUUID6D85865C",
          "UUID",
        ],
      },
    },
  },
  "Parameters": Object {
    "ExistingGreengrassGroupID": Object {
      "AllowedPattern": "[a-zA-Z0-9-]*",
      "ConstraintDescription": "Greengrass group ID should match the allowed pattern: [a-zA-Z0-9-]",
      "Description": "The Greengrass Group ID can be found in the Settings option of your Greengrass group in the console.",
      "Type": "String",
    },
    "ExistingKinesisStreamName": Object {
      "AllowedPattern": "[a-zA-Z0-9-_.]*",
      "ConstraintDescription": "Kinesis Stream Name should match the allowed pattern: [a-zA-Z0-9-_.]",
      "Description": "The Kinesis Data Stream Name can be found in the Data streams in the Amazon Kinesis console.",
      "Type": "String",
    },
  },
  "Resources": Object {
    "M2C2CommonResourcesCloudWatchLogsPolicy4EBC39D8": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:/aws/lambda/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "M2C2CommonResourcesCloudWatchLogsPolicy4EBC39D8",
        "Roles": Array [
          Object {
            "Ref": "M2C2CustomResourcesHelperFunctionRoleB44A591C",
          },
          Object {
            "Ref": "M2C2JobBuilderConnectorLambdaRole377E2CD8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "M2C2CommonResourcesLogBucket298A82D8": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W35",
              "reason": "This bucket is to store S3 logs, so it does not require access logs.",
            },
            Object {
              "id": "W51",
              "reason": "This bucket is to store S3 logs, so it does not require S3 policy.",
            },
          ],
        },
      },
      "Properties": Object {
        "AccessControl": "LogDeliveryWrite",
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "M2C2CommonResourcesM2C2BucketA6ECCFEA": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LoggingConfiguration": Object {
          "DestinationBucketName": Object {
            "Ref": "M2C2CommonResourcesLogBucket298A82D8",
          },
          "LogFilePrefix": "m2c2/",
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "M2C2CommonResourcesM2C2BucketPolicy2E9FE4D9": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "M2C2CommonResourcesM2C2BucketA6ECCFEA",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject",
                "s3:PutObject",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "M2C2CommonResourcesM2C2BucketA6ECCFEA",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "M2C2CustomResourcesHelperFunctionCD2D1A1B": Object {
      "DependsOn": Array [
        "M2C2CustomResourcesHelperFunctionRoleB44A591C",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Miss alarm, and the function does have permission to write CloudWatch Logs.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::FindInMap": Array [
                    "SourceCode",
                    "General",
                    "S3Bucket",
                  ],
                },
                "-",
                Object {
                  "Ref": "AWS::Region",
                },
              ],
            ],
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::FindInMap": Array [
                    "SourceCode",
                    "General",
                    "KeyPrefix",
                  ],
                },
                "/m2c2-helper.zip",
              ],
            ],
          },
        },
        "Description": "Machine to Cloud Connectivity custom resource function",
        "Environment": Object {
          "Variables": Object {
            "SOLUTION_ID": Object {
              "Fn::FindInMap": Array [
                "Solution",
                "Parameters",
                "Id",
              ],
            },
            "SOLUTION_VERSION": Object {
              "Fn::FindInMap": Array [
                "Solution",
                "Parameters",
                "Version",
              ],
            },
          },
        },
        "Handler": "m2c2_helper_custom_resource.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "M2C2CustomResourcesHelperFunctionRoleB44A591C",
            "Arn",
          ],
        },
        "Runtime": "python3.8",
        "Timeout": 240,
      },
      "Type": "AWS::Lambda::Function",
    },
    "M2C2CustomResourcesHelperFunctionRoleB44A591C": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
      },
      "Type": "AWS::IAM::Role",
    },
    "M2C2CustomResourcesSendAnonymousMetrics4AB3C078": Object {
      "Condition": "SendAnonymousUsage",
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ExistingGreengrassGroup": Object {
          "Ref": "ExistingGreengrassGroupID",
        },
        "ExistingKinesisStream": Object {
          "Ref": "ExistingGreengrassGroupID",
        },
        "Region": Object {
          "Ref": "AWS::Region",
        },
        "Resource": "SendAnonymousMetrics",
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "M2C2CustomResourcesHelperFunctionCD2D1A1B",
            "Arn",
          ],
        },
        "SolutionId": Object {
          "Fn::FindInMap": Array [
            "Solution",
            "Parameters",
            "Id",
          ],
        },
        "UUID": Object {
          "Fn::GetAtt": Array [
            "M2C2CustomResourcesUUID6D85865C",
            "UUID",
          ],
        },
        "Version": Object {
          "Fn::FindInMap": Array [
            "Solution",
            "Parameters",
            "Version",
          ],
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "M2C2CustomResourcesUUID6D85865C": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Resource": "CreateUUID",
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "M2C2CustomResourcesHelperFunctionCD2D1A1B",
            "Arn",
          ],
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "M2C2DataDataStreamKinesisFirehoseToS3KinesisFirehose1D4E2413": Object {
      "Condition": "CreateKinesisResources",
      "Properties": Object {
        "DeliveryStreamType": "KinesisStreamAsSource",
        "ExtendedS3DestinationConfiguration": Object {
          "BucketARN": Object {
            "Fn::GetAtt": Array [
              "M2C2DataDataStreamKinesisFirehoseToS3S3BucketD3170C5F",
              "Arn",
            ],
          },
          "BufferingHints": Object {
            "IntervalInSeconds": 300,
            "SizeInMBs": 5,
          },
          "CloudWatchLoggingOptions": Object {
            "Enabled": true,
            "LogGroupName": Object {
              "Ref": "M2C2DataDataStreamKinesisFirehoseToS3firehoseloggroupF899E6C2",
            },
            "LogStreamName": Object {
              "Ref": "M2C2DataDataStreamKinesisFirehoseToS3firehoseloggroupfirehoselogstream134A46A4",
            },
          },
          "CompressionFormat": "GZIP",
          "EncryptionConfiguration": Object {
            "KMSEncryptionConfig": Object {
              "AWSKMSKeyARN": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":kms:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":alias/aws/s3",
                  ],
                ],
              },
            },
          },
          "RoleARN": Object {
            "Fn::GetAtt": Array [
              "M2C2DataDataStreamKinesisFirehoseToS3KinesisFirehoseRole460EC745",
              "Arn",
            ],
          },
        },
        "KinesisStreamSourceConfiguration": Object {
          "KinesisStreamARN": Object {
            "Fn::GetAtt": Array [
              "M2C2DataDataStreamKinesisStreamDBEB6D24",
              "Arn",
            ],
          },
          "RoleARN": Object {
            "Fn::GetAtt": Array [
              "M2C2DataKinesisStreamsRole5D45BDD0",
              "Arn",
            ],
          },
        },
      },
      "Type": "AWS::KinesisFirehose::DeliveryStream",
    },
    "M2C2DataDataStreamKinesisFirehoseToS3KinesisFirehosePolicyEA13243B": Object {
      "Condition": "CreateKinesisResources",
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:AbortMultipartUpload",
                "s3:GetBucketLocation",
                "s3:GetObject",
                "s3:ListBucket",
                "s3:ListBucketMultipartUploads",
                "s3:PutObject",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "M2C2DataDataStreamKinesisFirehoseToS3S3BucketD3170C5F",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "M2C2DataDataStreamKinesisFirehoseToS3S3BucketD3170C5F",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "logs:PutLogEvents",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:",
                    Object {
                      "Ref": "M2C2DataDataStreamKinesisFirehoseToS3firehoseloggroupF899E6C2",
                    },
                    ":log-stream:",
                    Object {
                      "Ref": "M2C2DataDataStreamKinesisFirehoseToS3firehoseloggroupfirehoselogstream134A46A4",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "M2C2DataDataStreamKinesisFirehoseToS3KinesisFirehosePolicyEA13243B",
        "Roles": Array [
          Object {
            "Ref": "M2C2DataDataStreamKinesisFirehoseToS3KinesisFirehoseRole460EC745",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "M2C2DataDataStreamKinesisFirehoseToS3KinesisFirehoseRole460EC745": Object {
      "Condition": "CreateKinesisResources",
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "firehose.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "M2C2DataDataStreamKinesisFirehoseToS3S3BucketD3170C5F": Object {
      "Condition": "CreateKinesisResources",
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "NoncurrentVersionTransitions": Array [
                Object {
                  "StorageClass": "GLACIER",
                  "TransitionInDays": 90,
                },
              ],
              "Status": "Enabled",
            },
          ],
        },
        "LoggingConfiguration": Object {
          "DestinationBucketName": Object {
            "Ref": "M2C2CommonResourcesLogBucket298A82D8",
          },
          "LogFilePrefix": "m2c2data/",
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": Object {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "M2C2DataDataStreamKinesisFirehoseToS3S3BucketPolicy151F1028": Object {
      "Condition": "CreateKinesisResources",
      "Properties": Object {
        "Bucket": Object {
          "Ref": "M2C2DataDataStreamKinesisFirehoseToS3S3BucketD3170C5F",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "M2C2DataDataStreamKinesisFirehoseToS3S3BucketD3170C5F",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "M2C2DataDataStreamKinesisFirehoseToS3firehoseloggroupF899E6C2": Object {
      "Condition": "CreateKinesisResources",
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W86",
              "reason": "Retention period for CloudWatchLogs LogGroups are set to 'Never Expire' to preserve customer data indefinitely",
            },
            Object {
              "id": "W84",
              "reason": "By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch server-side encryption keys (AWS Managed Keys)",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "M2C2DataDataStreamKinesisFirehoseToS3firehoseloggroupfirehoselogstream134A46A4": Object {
      "Condition": "CreateKinesisResources",
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "LogGroupName": Object {
          "Ref": "M2C2DataDataStreamKinesisFirehoseToS3firehoseloggroupF899E6C2",
        },
      },
      "Type": "AWS::Logs::LogStream",
      "UpdateReplacePolicy": "Retain",
    },
    "M2C2DataDataStreamKinesisStreamDBEB6D24": Object {
      "Condition": "CreateKinesisResources",
      "Properties": Object {
        "RetentionPeriodHours": 24,
        "ShardCount": 1,
        "StreamEncryption": Object {
          "EncryptionType": "KMS",
          "KeyId": "alias/aws/kinesis",
        },
      },
      "Type": "AWS::Kinesis::Stream",
    },
    "M2C2DataDataStreamKinesisStreamGetRecordsIteratorAgeAlarm2E2BE1F3": Object {
      "Condition": "CreateKinesisResources",
      "Properties": Object {
        "AlarmDescription": "Consumer Record Processing Falling Behind, there is risk for data loss due to record expiration.",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": 1,
        "MetricName": "GetRecords.IteratorAgeMilliseconds",
        "Namespace": "AWS/Kinesis",
        "Period": 300,
        "Statistic": "Maximum",
        "Threshold": 2592000,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "M2C2DataDataStreamKinesisStreamReadProvisionedThroughputExceededAlarmCC22B4BE": Object {
      "Condition": "CreateKinesisResources",
      "Properties": Object {
        "AlarmDescription": "Consumer Application is Reading at a Slower Rate Than Expected.",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "MetricName": "ReadProvisionedThroughputExceeded",
        "Namespace": "AWS/Kinesis",
        "Period": 300,
        "Statistic": "Average",
        "Threshold": 0,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "M2C2DataKinesisStreamsRole5D45BDD0": Object {
      "Condition": "CreateKinesisResources",
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "firehose.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "kinesis:DescribeStream",
                    "kinesis:GetShardIterator",
                    "kinesis:GetRecords",
                    "kinesis:ListShards",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::GetAtt": Array [
                      "M2C2DataDataStreamKinesisStreamDBEB6D24",
                      "Arn",
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "KinesisStreamsRoleRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "M2C2GreengrassResourcesGGCertCreator342C1381": Object {
      "Condition": "CreateGreengrassResources",
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "M2C2GreengrassResourcesGGCertCreatorPolicyBC976066",
      ],
      "Properties": Object {
        "Resource": "CreateGGCertAndKeys",
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "M2C2GreengrassResourcesGGCertCreatorLambdaCustomResourceDD692046",
            "Arn",
          ],
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "M2C2GreengrassResourcesGGCertCreatorLambdaCustomResourceDD692046": Object {
      "Condition": "CreateGreengrassResources",
      "DependsOn": Array [
        "M2C2GreengrassResourcesGGCertCreatorRole3B8D2FD0",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "The CloudWatch logs permission is added in the role.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::FindInMap": Array [
                    "SourceCode",
                    "General",
                    "S3Bucket",
                  ],
                },
                "-",
                Object {
                  "Ref": "AWS::Region",
                },
              ],
            ],
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::FindInMap": Array [
                    "SourceCode",
                    "General",
                    "KeyPrefix",
                  ],
                },
                "/m2c2-helper.zip",
              ],
            ],
          },
        },
        "Description": "AWS Machine to Cloud job builder function that creates the certificate, keypair, config, and install script for the Greengrass edge device",
        "Environment": Object {
          "Variables": Object {
            "AccountID": Object {
              "Ref": "AWS::AccountId",
            },
            "S3Bucket": Object {
              "Ref": "M2C2CommonResourcesM2C2BucketA6ECCFEA",
            },
            "SolutionId": Object {
              "Fn::FindInMap": Array [
                "Solution",
                "Parameters",
                "Id",
              ],
            },
            "SolutionVersion": Object {
              "Fn::FindInMap": Array [
                "Solution",
                "Parameters",
                "Version",
              ],
            },
            "StackName": Object {
              "Ref": "AWS::StackName",
            },
            "ThingArn": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "arn:",
                  Object {
                    "Ref": "AWS::Partition",
                  },
                  ":iot:",
                  Object {
                    "Ref": "AWS::Region",
                  },
                  ":",
                  Object {
                    "Ref": "AWS::AccountId",
                  },
                  ":thing/",
                  Object {
                    "Ref": "AWS::StackName",
                  },
                  "-M2C2DeviceGateway",
                ],
              ],
            },
            "ThingName": Object {
              "Ref": "M2C2GreengrassResourcesm2c2DeviceGateway09CA1461",
            },
          },
        },
        "Handler": "gg_custom_resource.handler",
        "MemorySize": 128,
        "Role": Object {
          "Fn::GetAtt": Array [
            "M2C2GreengrassResourcesGGCertCreatorRole3B8D2FD0",
            "Arn",
          ],
        },
        "Runtime": "python3.8",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "M2C2GreengrassResourcesGGCertCreatorPolicyBC976066": Object {
      "Condition": "CreateGreengrassResources",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "The * resource is required for the IoT actions for the Lambda function to preform.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject",
                "s3:PutObject",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "M2C2CommonResourcesM2C2BucketA6ECCFEA",
                      },
                      "/*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "M2C2CommonResourcesM2C2BucketA6ECCFEA",
                      },
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "iot:ListThingPrincipals",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":iot:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":thing/",
                    Object {
                      "Ref": "AWS::StackName",
                    },
                    "-M2C2DeviceGateway",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "iot:CreateKeysAndCertificate",
                "iot:DescribeEndpoint",
                "iot:UpdateCertificate",
                "iot:UpdateThingShadow",
                "iot:DeleteCertificate",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "greengrass:ResetDeployments",
                "greengrass:GetGroup",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":greengrass:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":/greengrass/groups/*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:/aws/lambda/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "M2C2GreengrassResourcesGGCertCreatorPolicyBC976066",
        "Roles": Array [
          Object {
            "Ref": "M2C2GreengrassResourcesGGCertCreatorRole3B8D2FD0",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "M2C2GreengrassResourcesGGCertCreatorRole3B8D2FD0": Object {
      "Condition": "CreateGreengrassResources",
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "M2C2GreengrassResourcesGGCertDeleteC0082A06": Object {
      "Condition": "CreateGreengrassResources",
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "CertId": Object {
          "Fn::GetAtt": Array [
            "M2C2GreengrassResourcesGGCertCreator342C1381",
            "certificateId",
          ],
        },
        "GreengrassGroupId": Object {
          "Fn::GetAtt": Array [
            "M2C2GreengrassResourcesm2c2GreengrassGroupFA1A4452",
            "Id",
          ],
        },
        "Resource": "DeleteGGCertAndKeys",
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "M2C2GreengrassResourcesGGCertCreatorLambdaCustomResourceDD692046",
            "Arn",
          ],
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "M2C2GreengrassResourcesM2C2GreengrassResourcePolicy00EF3DB2": Object {
      "Condition": "CreateGreengrassResources",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "The * resource on its permission policy allows M2C2GreengrassResourcePolicy to interact with multiple topics and IoT things.",
            },
            Object {
              "id": "F4",
              "reason": "This policy is for Greengrass group to control Greengrass group fully so * action is needed.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "iot:GetThingShadow",
                "iot:UpdateThingShadow",
                "iot:DeleteThingShadow",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iot:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":thing/GG_*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iot:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":thing/GG_*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iot:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":thing/*-gcm",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iot:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":thing/*-gda",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iot:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":thing/*-gci",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "iot:Publish",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":iot:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":topic/m2c2/job/*",
                  ],
                ],
              },
            },
            Object {
              "Action": "greengrass:*",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:/aws/greengrass/*",
                  ],
                ],
              },
            },
            Object {
              "Action": "kinesis:PutRecords",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    Object {
                      "Fn::If": Array [
                        "CreateKinesisResources",
                        Object {
                          "Ref": "M2C2DataDataStreamKinesisStreamDBEB6D24",
                        },
                        Object {
                          "Ref": "ExistingKinesisStreamName",
                        },
                      ],
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "M2C2GreengrassResourcesM2C2GreengrassResourcePolicy00EF3DB2",
        "Roles": Array [
          Object {
            "Ref": "M2C2GreengrassResourcesM2C2GreengrassResourceRole14AE5E06",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "M2C2GreengrassResourcesM2C2GreengrassResourceRole14AE5E06": Object {
      "Condition": "CreateGreengrassResources",
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "greengrass.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "M2C2GreengrassResourcesM2C2IoTResourcePolicy7FDBF0AC": Object {
      "Condition": "CreateGreengrassResources",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W38",
              "reason": "The *  action is a placeholder for Greengrass until further testing is performed.",
            },
            Object {
              "id": "W39",
              "reason": "The * resource on its permission policy allows to manipulate Greegrass resource.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "greengrass:*",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "iot:Connect",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iot:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":client/",
                      Object {
                        "Ref": "AWS::StackName",
                      },
                      "-M2C2DeviceGateway*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "iot:GetThingShadow",
                "iot:UpdateThingShadow",
                "iot:DeleteThingShadow",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iot:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":thing/",
                      Object {
                        "Ref": "AWS::StackName",
                      },
                      "-M2C2DeviceGateway*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "iot:Publish",
                "iot:Receive",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iot:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":topic/m2c2/job/*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iot:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":topic/$aws/things/",
                      Object {
                        "Ref": "AWS::StackName",
                      },
                      "-M2C2DeviceGateway*/shadow/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "iot:Subscribe",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iot:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":topicfilter/m2c2/job/*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iot:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":topicfilter/$aws/things/",
                      Object {
                        "Ref": "AWS::StackName",
                      },
                      "-M2C2DeviceGateway*/shadow/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IoT::Policy",
    },
    "M2C2GreengrassResourcesM2C2PolicyPrincipalAttachment10311136": Object {
      "Condition": "CreateGreengrassResources",
      "Properties": Object {
        "PolicyName": Object {
          "Ref": "M2C2GreengrassResourcesM2C2IoTResourcePolicy7FDBF0AC",
        },
        "Principal": Object {
          "Fn::GetAtt": Array [
            "M2C2GreengrassResourcesGGCertCreator342C1381",
            "certificateArn",
          ],
        },
      },
      "Type": "AWS::IoT::PolicyPrincipalAttachment",
    },
    "M2C2GreengrassResourcesm2c2CoreDefinitionE4311A30": Object {
      "Condition": "CreateGreengrassResources",
      "Properties": Object {
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-M2C2GreengrassGroup_Core",
            ],
          ],
        },
      },
      "Type": "AWS::Greengrass::CoreDefinition",
    },
    "M2C2GreengrassResourcesm2c2CoreDefinitionVersionA0AD4C88": Object {
      "Condition": "CreateGreengrassResources",
      "Properties": Object {
        "CoreDefinitionId": Object {
          "Fn::GetAtt": Array [
            "M2C2GreengrassResourcesm2c2CoreDefinitionE4311A30",
            "Id",
          ],
        },
        "Cores": Array [
          Object {
            "CertificateArn": Object {
              "Fn::GetAtt": Array [
                "M2C2GreengrassResourcesGGCertCreator342C1381",
                "certificateArn",
              ],
            },
            "Id": Object {
              "Fn::GetAtt": Array [
                "M2C2GreengrassResourcesm2c2CoreDefinitionE4311A30",
                "Id",
              ],
            },
            "SyncShadow": true,
            "ThingArn": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "arn:",
                  Object {
                    "Ref": "AWS::Partition",
                  },
                  ":iot:",
                  Object {
                    "Ref": "AWS::Region",
                  },
                  ":",
                  Object {
                    "Ref": "AWS::AccountId",
                  },
                  ":thing/",
                  Object {
                    "Ref": "AWS::StackName",
                  },
                  "-M2C2DeviceGateway",
                ],
              ],
            },
          },
        ],
      },
      "Type": "AWS::Greengrass::CoreDefinitionVersion",
    },
    "M2C2GreengrassResourcesm2c2DeviceGateway09CA1461": Object {
      "Condition": "CreateGreengrassResources",
      "Properties": Object {
        "ThingName": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-M2C2DeviceGateway",
            ],
          ],
        },
      },
      "Type": "AWS::IoT::Thing",
    },
    "M2C2GreengrassResourcesm2c2GreengrassGroupFA1A4452": Object {
      "Condition": "CreateGreengrassResources",
      "Properties": Object {
        "InitialVersion": Object {
          "CoreDefinitionVersionArn": Object {
            "Ref": "M2C2GreengrassResourcesm2c2CoreDefinitionVersionA0AD4C88",
          },
          "LoggerDefinitionVersionArn": Object {
            "Ref": "M2C2GreengrassResourcesm2c2LoggerDefinitionVersion05DD1B75",
          },
          "ResourceDefinitionVersionArn": Object {
            "Ref": "M2C2GreengrassResourcesm2c2ResourceDefinitionVersion7E83E9F9",
          },
        },
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-M2C2GreengrassGroup",
            ],
          ],
        },
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "M2C2GreengrassResourcesM2C2GreengrassResourceRole14AE5E06",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Greengrass::Group",
    },
    "M2C2GreengrassResourcesm2c2LoggerDefinition087053A6": Object {
      "Condition": "CreateGreengrassResources",
      "Properties": Object {
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-M2C2GreengrassGroup_LoggerDefinition",
            ],
          ],
        },
      },
      "Type": "AWS::Greengrass::LoggerDefinition",
    },
    "M2C2GreengrassResourcesm2c2LoggerDefinitionVersion05DD1B75": Object {
      "Condition": "CreateGreengrassResources",
      "Properties": Object {
        "LoggerDefinitionId": Object {
          "Fn::GetAtt": Array [
            "M2C2GreengrassResourcesm2c2LoggerDefinition087053A6",
            "Id",
          ],
        },
        "Loggers": Array [
          Object {
            "Component": "GreengrassSystem",
            "Id": "M2C2GreengrassFileSystemLogger",
            "Level": "INFO",
            "Space": 128,
            "Type": "FileSystem",
          },
          Object {
            "Component": "GreengrassSystem",
            "Id": "GreengrasAWSCloudWatchLogger",
            "Level": "WARN",
            "Type": "AWSCloudWatch",
          },
          Object {
            "Component": "Lambda",
            "Id": "M2C2LambdaFileSystemLogger",
            "Level": "INFO",
            "Space": 128,
            "Type": "FileSystem",
          },
          Object {
            "Component": "Lambda",
            "Id": "M2C2LambdaAWSCloudWatchLogger",
            "Level": "WARN",
            "Type": "AWSCloudWatch",
          },
        ],
      },
      "Type": "AWS::Greengrass::LoggerDefinitionVersion",
    },
    "M2C2GreengrassResourcesm2c2ResourceDefinition9A3D039B": Object {
      "Condition": "CreateGreengrassResources",
      "Properties": Object {
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-M2C2GreengrassGroup_ResourceDefinition",
            ],
          ],
        },
      },
      "Type": "AWS::Greengrass::ResourceDefinition",
    },
    "M2C2GreengrassResourcesm2c2ResourceDefinitionVersion7E83E9F9": Object {
      "Condition": "CreateGreengrassResources",
      "Properties": Object {
        "ResourceDefinitionId": Object {
          "Fn::GetAtt": Array [
            "M2C2GreengrassResourcesm2c2ResourceDefinition9A3D039B",
            "Id",
          ],
        },
        "Resources": Array [
          Object {
            "Id": "M2C2LocalResourceId",
            "Name": "M2C2LocalResource",
            "ResourceDataContainer": Object {
              "LocalVolumeResourceData": Object {
                "DestinationPath": "/m2c2/job",
                "GroupOwnerSetting": Object {
                  "AutoAddGroupOwner": true,
                },
                "SourcePath": "/m2c2/job",
              },
            },
          },
        ],
      },
      "Type": "AWS::Greengrass::ResourceDefinitionVersion",
    },
    "M2C2JobBuilderConnectorLambdaRole377E2CD8": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
      },
      "Type": "AWS::IAM::Role",
    },
    "M2C2JobBuilderDynamoTable8B0A941C": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "jobid",
            "AttributeType": "S",
          },
          Object {
            "AttributeName": "version",
            "AttributeType": "N",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": Array [
          Object {
            "AttributeName": "jobid",
            "KeyType": "HASH",
          },
          Object {
            "AttributeName": "version",
            "KeyType": "RANGE",
          },
        ],
        "PointInTimeRecoverySpecification": Object {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": Object {
          "SSEEnabled": true,
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "M2C2JobBuilderJobBuilderPolicy1751820A": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "The * resource is needed to control Greengrass resources.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":s3:::",
                    Object {
                      "Fn::FindInMap": Array [
                        "SourceCode",
                        "General",
                        "S3Bucket",
                      ],
                    },
                    "-",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    "/",
                    Object {
                      "Fn::FindInMap": Array [
                        "SourceCode",
                        "General",
                        "KeyPrefix",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "s3:GetBucketLocation",
                "s3:GetObject",
                "s3:ListBucket",
                "s3:PutObject",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "M2C2CommonResourcesM2C2BucketA6ECCFEA",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "M2C2CommonResourcesM2C2BucketA6ECCFEA",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "iot:Publish",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":iot:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":topic/m2c2/job/*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "lambda:CreateFunction",
                "lambda:DeleteFunction",
                "lambda:PublishVersion",
                "lambda:CreateAlias",
                "lambda:DeleteAlias",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":lambda:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":function:m2c2-opcda-connector*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":lambda:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":function:m2c2-slmp-connector*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "M2C2JobBuilderConnectorLambdaRole377E2CD8",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "greengrass:CreateCoreDefinitionVersion",
                "greengrass:CreateCoreDefinition",
                "greengrass:CreateDeployment",
                "greengrass:CreateDeviceDefinitionVersion",
                "greengrass:CreateDeviceDefinition",
                "greengrass:CreateFunctionDefinitionVersion",
                "greengrass:CreateFunctionDefinition",
                "greengrass:CreateGroupVersion",
                "greengrass:CreateLoggerDefinitionVersion",
                "greengrass:CreateLoggerDefinition",
                "greengrass:CreateResourceDefinitionVersion",
                "greengrass:CreateResourceDefinition",
                "greengrass:CreateSubscriptionDefinitionVersion",
                "greengrass:CreateSubscriptionDefinition",
                "greengrass:DeleteCoreDefinition",
                "greengrass:DeleteDeviceDefinition",
                "greengrass:DeleteFunctionDefinition",
                "greengrass:DeleteLoggerDefinition",
                "greengrass:DeleteResourceDefinition",
                "greengrass:DeleteSubscriptionDefinition",
                "greengrass:GetCoreDefinitionVersion",
                "greengrass:GetDeploymentStatus",
                "greengrass:GetDeviceDefinitionVersion",
                "greengrass:GetFunctionDefinitionVersion",
                "greengrass:GetGroupVersion",
                "greengrass:GetGroup",
                "greengrass:GetLoggerDefinitionVersion",
                "greengrass:GetResourceDefinitionVersion",
                "greengrass:GetSubscriptionDefinitionVersion",
                "greengrass:ListCoreDefinitions",
                "greengrass:ListDeviceDefinitions",
                "greengrass:ListFunctionDefinitions",
                "greengrass:ListLoggerDefinitions",
                "greengrass:ListResourceDefinitions",
                "greengrass:ListSubscriptionDefinitions",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "M2C2JobBuilderJobBuilderPolicy1751820A",
        "Roles": Array [
          Object {
            "Ref": "M2C2JobBuilderLambdaFunctionServiceRoleCA63C3E5",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "M2C2JobBuilderJobGeneratorRule25A04756": Object {
      "Properties": Object {
        "TopicRulePayload": Object {
          "Actions": Array [
            Object {
              "Lambda": Object {
                "FunctionArn": Object {
                  "Fn::GetAtt": Array [
                    "M2C2JobBuilderLambdaFunction249EB397",
                    "Arn",
                  ],
                },
              },
            },
          ],
          "Description": "Processing of the job submitted and generating the job file to be pushed to Greengrass",
          "RuleDisabled": false,
          "Sql": "SELECT * FROM 'm2c2/job/request'",
        },
      },
      "Type": "AWS::IoT::TopicRule",
    },
    "M2C2JobBuilderLambdaFunction249EB397": Object {
      "DependsOn": Array [
        "M2C2JobBuilderLambdaFunctionServiceRoleDefaultPolicy5A62F46C",
        "M2C2JobBuilderLambdaFunctionServiceRoleCA63C3E5",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with more tighter permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::FindInMap": Array [
                    "SourceCode",
                    "General",
                    "S3Bucket",
                  ],
                },
                "-",
                Object {
                  "Ref": "AWS::Region",
                },
              ],
            ],
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::FindInMap": Array [
                    "SourceCode",
                    "General",
                    "KeyPrefix",
                  ],
                },
                "/m2c2-job-builder.zip",
              ],
            ],
          },
        },
        "Description": "Machine to Cloud Connectivity job builder function",
        "Environment": Object {
          "Variables": Object {
            "CONNECTOR_LAMBDA_ROLE": Object {
              "Fn::GetAtt": Array [
                "M2C2JobBuilderConnectorLambdaRole377E2CD8",
                "Arn",
              ],
            },
            "GREENGRASS_ID": Object {
              "Fn::If": Array [
                "CreateGreengrassResources",
                Object {
                  "Fn::GetAtt": Array [
                    "M2C2GreengrassResourcesm2c2GreengrassGroupFA1A4452",
                    "Id",
                  ],
                },
                Object {
                  "Ref": "ExistingGreengrassGroupID",
                },
              ],
            },
            "JOB_BUILDER_BUCKET": Object {
              "Ref": "M2C2CommonResourcesM2C2BucketA6ECCFEA",
            },
            "JOB_BUILDER_KEY": Object {
              "Fn::FindInMap": Array [
                "Solution",
                "Parameters",
                "JobMetadataPrefix",
              ],
            },
            "JOB_DYNAMODB_TABLE": Object {
              "Ref": "M2C2JobBuilderDynamoTable8B0A941C",
            },
            "KINESIS_STREAM": Object {
              "Fn::If": Array [
                "CreateKinesisResources",
                Object {
                  "Ref": "M2C2DataDataStreamKinesisStreamDBEB6D24",
                },
                Object {
                  "Ref": "ExistingKinesisStreamName",
                },
              ],
            },
            "SEND_ANONYMOUS_METRIC": Object {
              "Fn::FindInMap": Array [
                "Metrics",
                "General",
                "SendAnonymousUsage",
              ],
            },
            "SOLUTION_ID": Object {
              "Fn::FindInMap": Array [
                "Solution",
                "Parameters",
                "Id",
              ],
            },
            "SOLUTION_VERSION": Object {
              "Fn::FindInMap": Array [
                "Solution",
                "Parameters",
                "Version",
              ],
            },
            "SOURCE_S3_BUCKET": Object {
              "Fn::Join": Array [
                "",
                Array [
                  Object {
                    "Fn::FindInMap": Array [
                      "SourceCode",
                      "General",
                      "S3Bucket",
                    ],
                  },
                  "-",
                  Object {
                    "Ref": "AWS::Region",
                  },
                ],
              ],
            },
            "SOURCE_S3_PREFIX": Object {
              "Fn::FindInMap": Array [
                "SourceCode",
                "General",
                "KeyPrefix",
              ],
            },
            "UUID": Object {
              "Fn::GetAtt": Array [
                "M2C2CustomResourcesUUID6D85865C",
                "UUID",
              ],
            },
          },
        },
        "Handler": "m2c2_job_builder_main.lambda_handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "M2C2JobBuilderLambdaFunctionServiceRoleCA63C3E5",
            "Arn",
          ],
        },
        "Runtime": "python3.8",
        "Timeout": 300,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "M2C2JobBuilderLambdaFunctionLambdaInvokePermission528B414D": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "M2C2JobBuilderLambdaFunction249EB397",
            "Arn",
          ],
        },
        "Principal": "iot.amazonaws.com",
        "SourceAccount": Object {
          "Ref": "AWS::AccountId",
        },
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "M2C2JobBuilderJobGeneratorRule25A04756",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "M2C2JobBuilderLambdaFunctionServiceRoleCA63C3E5": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "M2C2JobBuilderLambdaFunctionServiceRoleDefaultPolicy5A62F46C": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "M2C2JobBuilderDynamoTable8B0A941C",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "M2C2JobBuilderLambdaFunctionServiceRoleDefaultPolicy5A62F46C",
        "Roles": Array [
          Object {
            "Ref": "M2C2JobBuilderLambdaFunctionServiceRoleCA63C3E5",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
}
`;
